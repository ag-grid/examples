#!/usr/bin/env bash

source "$T2_SCRIPTS/helpers/runFromProjectDirectory.sh"

# if ag-grid.config.sh file missing -> exit
if [[ ! -f ag-grid.config.sh ]]; then
    echo "ag-grid.config.sh file is missing"
    exit 1
fi

# import FRAMEWORK, TICKET, DOCS_IMPORTED and AG_GRID_INSTALLATION_METHOD variables
source "./ag-grid.config.sh"

# if [ -z $FRAMEWORK ] || ( [ ! $FRAMEWORK == 'angular' ] && [ ! $FRAMEWORK == 'react' ] && [ ! $FRAMEWORK == 'vue' ] && [ ! $FRAMEWORK == 'vanilla' ] ); then
if [ -z $AG_GRID_INSTALLATION_METHOD ]; then
    echo "AG_GRID_INSTALLATION_METHOD is missing in ag-grid.config.sh"
    exit 1
fi

# this script can only be run once per project
if [[ ! $DOCS_EXAMPLE == "" ]]; then
    echo 'You can only run this script once per project.'
    exit 1
fi

# select a docs example to import
DOCUMENATION_EXAMPLES="range-selection row-grouping server-side-row-model tree-data master-detail master-detail-custom-detail-grid"

PS3="Select an AG Grid Docs Example: "

select DOCS_EXAMPLE in $DOCUMENATION_EXAMPLES; do
    echo "Selected AG Grid Docs Example: $DOCS_EXAMPLE"
    break
done

# update ag-grid.config file to include DOCS_EXAMPLE
gsed -i "s/DOCS_EXAMPLE.*/DOCS_EXAMPLE=\"$DOCS_EXAMPLE\"/" $PWD/ag-grid.config.sh

echo "importing [$DOCS_EXAMPLE][$FRAMEWORK] example from the AG Grid docs..."

# fetch DOCS_EXAMPLE metadata from t2/docs/metadata directory
T2_DOCS_METADATA_DIR_PATH="$T2_HOME/docs/metadata"
T2_DOCS_CORE="$T2_HOME/docs/metadata/docs-core.json"

# returns the framework path for a given framework, e.g. react can be react or reactFunctional
DOCS_FRAMEWORK_PATH=$(jq -c .$FRAMEWORK'.frameworkPath' $T2_DOCS_CORE)

# get the base URL for the doc example
DOCS_BASE_URL=$(jq -c '.baseURL'.\""$DOCS_EXAMPLE"\" $T2_DOCS_CORE)

# remove beginning and end quotation marks
DOCS_FRAMEWORK_PATH=$(gsed -e 's/^"//;s/"$//' <<<$DOCS_FRAMEWORK_PATH)
DOCS_BASE_URL=$(gsed -e 's/^"//;s/"$//' <<<$DOCS_BASE_URL)

# change to modules link if necessary
if [ $AG_GRID_INSTALLATION_METHOD == "modules" ]; then
    DOCS_BASE_URL=$(gsed -e 's/\/packages/\/modules/g' <<<$DOCS_BASE_URL)
fi

DOCS_BASE_URL="$DOCS_BASE_URL/$DOCS_FRAMEWORK_PATH"

# install jq
# https://stedolan.github.io/jq/

# fetch files from core
jq -c .$FRAMEWORK'.filesToFetch[]' $T2_DOCS_CORE | while read i; do
    file=$(echo "$i" | jq -r '.url')
    docs_url="$DOCS_BASE_URL/$file"
    destination=$(echo "$i" | jq -r '.destination')

    echo "$docs_url > $destination"
    # fetch and import
    curl -o $destination $docs_url
done

# fetch files for specific example
jq -c .$FRAMEWORK'.filesToFetch[]' $T2_DOCS_METADATA_DIR_PATH/$DOCS_EXAMPLE.json | while read i; do
    file=$(echo "$i" | jq -r '.url')
    docs_url="$DOCS_BASE_URL/$file"
    destination=$(echo "$i" | jq -r '.destination')
    echo "$docs_url > $destination"
    curl -o $destination $docs_url
done

# iterate over filesToRemoveFromTemplate and delete them
jq -c .$FRAMEWORK'.filesToRemoveFromTemplate[] | .' $T2_DOCS_CORE | while read i; do
    # do stuff with $i
    fileToDelete=$(echo "$i" | jq -r)
    # delete file
    echo "Removing $fileToDelete from project"
    rm -rf $PWD/$fileToDelete
done

# inject style tags from the docs example's index.html into the project
echo 'injecting page styles...'

# first fetch the projects index.html file
html_file="$DOCS_BASE_URL/index.html"

# create an temporary HTML file where we will output the fetched index.html file
curl -o tmp.html $html_file

# match the <style></style> tags and store them in a variable
PAGE_STYLES=$(gsed -n "/<style.*/,/<\/style>/p" tmp.html)

# inject into projects index.html file
case "$FRAMEWORK" in
'angular')
    gsed -i "/<\/head>/i $(echo $PAGE_STYLES)" "$PWD/src/index.html"
    ;;
'react')
    gsed -i "/<\/head>/i $(echo $PAGE_STYLES)" "$PWD/public/index.html"
    ;;
'vue')
    gsed -i "/<\/head>/i $(echo $PAGE_STYLES)" "$PWD/public/index.html"
    ;;
'vanilla')
    gsed -i "/<\/head>/i $(echo $PAGE_STYLES)" "$PWD/index.html"
    ;;
*)
    echo "Could not inject stylesheets"
    ;;
esac

# delete temporary HTML file
rm -rf $PWD/tmp.html

# ***************************************************
# ******** FRAMEWORK SPECIFIC MODIFICATIONS *********
# ***************************************************

# ANGULAR specific
if [[ $FRAMEWORK == "angular" ]]; then
    # need to add some compiler options
    gsed -i "/compilerOptions/a \"noImplicitAny\": false,\n\"strictPropertyInitialization\": false," "$PWD/tsconfig.json"

    # need to move AG Grid style imports from src/app/app.component.ts -> src/styles.scss for codesandbox
    echo "[Angular only] injecting AG Grid stylesheet imports from src/app/app.component.ts -> src/styles.scss for codesandbox"
    STYLE_IMPORTS=$(gsed -n "/import [\"']ag-grid-community\/styles\//p" src/app/app.component.ts)
    FORMATTED_STLYE_IMPORTS=$(echo $STYLE_IMPORTS | gsed -e 's/import/@import/g' | gsed -e 's/; /;\\n/g')
    # delete any current AG Grid stylesheet imports
    gsed -i "/@import [\"']ag-grid-community\/styles.*/d" "src/styles.scss"
    # inject new stylesheet imports
    gsed -i "2a $(echo $FORMATTED_STLYE_IMPORTS)" "$PWD/src/styles.scss"

    gsed -i '$a\' "$PWD/src/styles.scss"
    echo "[AG Grid Angular] checking if style exists..."
    if [ -f "$PWD/src/app/app.component.css" ]; then
        echo "style does exist, copying to style.scss"
        cat "$PWD/src/app/app.component.css" >>"$PWD/src/styles.scss"
    fi
    # change private properties -> public properties in component
    # this is because component templates only have access to public properties
    echo "[Angular only] changing 'private' component properties to 'public'"
    gsed -i 's/private/public/g' "$PWD/src/app/app.component.ts"
    # change this rowData: [] -> rowData: any
    gsed -i 's/rowData: \[\]/rowData: any/g' "$PWD/src/app/app.component.ts"

fi
# VUE specific
if [[ $FRAMEWORK == "vue" ]]; then
    # allow compiling vue templates
    # https://cli.vuejs.org/config/#runtimecompiler
    echo "[Vue only] allow compiling vue templates"
    echo "module.exports = { runtimeCompiler: true }" >>vue.config.js
    # we also need to replace the root vue element to nest the ag-grid-vue container element (<my-component></my-component>)
    echo '[Vue only] replacing root element'
    BEFORE_ROOT_ELEMENT_REPLACE="<div id=\"app\"><\/div>"
    AFTER_ROOT_ELEMENT_REPLACE="<div id=\"app\"><my-component>Loading Vue example<\/my-component><\/div>"
    gsed -i "s/$BEFORE_ROOT_ELEMENT_REPLACE/$AFTER_ROOT_ELEMENT_REPLACE/g" "$PWD/public/index.html"
fi
# VANILLA specific
if [[ $FRAMEWORK == "vanilla" ]]; then
    # import AG Grid packages into src/index.js
    echo '[Vanilla only] injecting AG Grid packages imports'
    VANILLA_IMPORTS="import \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\nimport \"ag-grid-enterprise\";\nimport * as agGrid from \"ag-grid-community\";\n"
    gsed -i "1i $VANILLA_IMPORTS" "$PWD/src/index.js"

    # remove DOMContentLoaded for codesandbox
    echo '[Vanilla only] removing DOMContentLoaded for code sandbox'
    case "$DOCS_EXAMPLE" in
    'range-selection')
        gsed -i '27d;34d;' "$PWD/src/index.js"
        ;;
    'row-grouping')
        gsed -i '29d; 36d;' "$PWD/src/index.js"
        ;;
    'server-side-row-model')
        gsed -i '27d;43d;' "$PWD/src/index.js"
        ;;
    'tree data')
        gsed -i '39d;45d;' "$PWD/src/index.js"
        ;;
    *)
        echo "[Vanilla] could not remove DOMContentLoaded"
        ;;
    esac
fi

# ***************************************************
# ****** DOCS_EXAMPLES SPECIFIC MODIFICATIONS *******
# ***************************************************

if [[ $DOCS_EXAMPLE == "tree-data" ]]; then
    echo '[tree data] importing additional stylesheet imports'
    case "$FRAMEWORK" in
    'angular')
        TREE_DATA_STYLE_IMPORTS="styleUrls: ['./app.component.css'],"
        gsed -i "/selector: 'my-app'/a $TREE_DATA_STYLE_IMPORTS" "$PWD/src/app/app.component.ts"
        ;;
    'react')
        # TREE_DATA_STYLE_IMPORTS="import './style.css'"
        # gsed -i "8a $TREE_DATA_STYLE_IMPORTS" "$PWD/src/index.js"
        ;;
    'vue')
        TREE_DATA_STYLE_IMPORTS='<link rel="stylesheet" href="styles.css"/>'
        gsed -i "/<\/head>/i $TREE_DATA_STYLE_IMPORTS" "$PWD/public/index.html"
        ;;
    'vanilla')
        TREE_DATA_STYLE_IMPORTS='<link rel="stylesheet" href="styles.css"/>'
        gsed -i "/<\/head>/i $TREE_DATA_STYLE_IMPORTS" "$PWD/index.html"
        ;;
    *)
        echo "Could not inject [tree-data] stylesheets imports"
        ;;
    esac
fi

# finished
echo "======================================================"
echo "[$FRAMEWORK]$DOCS_EXAMPLE docs example imported."
echo "======================================================"
